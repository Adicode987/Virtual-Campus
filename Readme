

---

## üìö Virtual Smart Campus System

A lightweight terminal-based application simulating a university environment. It includes secure login for students and professors, a library management system, course enrollment workflows, campus-wide announcements, and a Lost & Found board‚Äîall in a modular C++ codebase.

---

### üöÄ Features

- **üîê Student & Professor Authentication**  
  Signup and login system with persistent credential storage.

- **üìò Course Enrollment with Professor Approval**  
  Students request courses; professors approve or reject enrollment.

- **üìö Library Management**  
  Browse, search, borrow, and return books‚Äîtracking inventory per title.

- **üì¢ Campus Announcement System**  
  Professors post announcements; all students can view them.

- **üéí Lost and Found**  
  Students can report lost/found items and browse community reports.

---

### üß± Folder Structure

```
Virtual-Campus/
‚îú‚îÄ‚îÄ include/              # All header files
‚îú‚îÄ‚îÄ src/                  # All source code files
‚îú‚îÄ‚îÄ data/                 # Flat files storing app state
‚îú‚îÄ‚îÄ build/                # (Generated) compiled executable
‚îî‚îÄ‚îÄ README.md             # Project info and usage
```

---

### üì¶ Setup Instructions

> üõ†Ô∏è Prerequisite: Make sure `g++` is installed and available in your terminal.

1. **Clone the repo:**

```bash
git clone https://github.com/Adicode987/Virtual-Campus.git
cd Virtual-Campus
```

2. **Create a build folder (if not already there):**

```bash
mkdir build
```

3. **Compile the system:**

```bash
g++ src/main.cpp src/Global.cpp src/Announcement.cpp src/LostAndFound.cpp -Iinclude -o build/app.exe
```

4. **Run the application:**

```bash
.\build\app.exe
```

5. **Make sure these data files exist inside the `data/` folder (can be empty to start):**

```
announcements.txt
books.txt
borrowed.txt
courses.txt
credentials.txt
enrollments.txt
lost_and_found.txt
pending.txt
professors.txt
```

You can populate `books.txt` and others with sample data if needed.

---



### üß† Technologies Used

- C++ (Object-Oriented, STL)
- File I/O for lightweight data persistence
- Modular header/source structure
- Console UI for accessibility and portability

---

### üí° Future Enhancements

- Attendance tracking
- Grading and exam score management
- Event/workshop management
- Club and society memberships



